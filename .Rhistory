q()
library(maftools)
maf_path <- "/Users/rshibaki/Documents/project/ADJUST/adjust/maf_test.tsv"
maf_data <- read.maf(maf = maf_path, vc_nonSyn = FALSE, data.table = FALSE)
oncoplot(maf = maf_data, showTumorSampleBarcodes = TRUE)
library(maftools)
maf_path <- "/Users/rshibaki/Documents/project/ADJUST/adjust/maf_test.tsv"
maf_data <- read.maf(maf = maf_path, vc_nonSyn = FALSE, removeSilent = FALSE)
oncoplot(maf = maf_data, showTumorSampleBarcodes = TRUE)
library(maftools)
maf_path <- "/Users/rshibaki/Documents/project/ADJUST/adjust/maf_test.tsv"
maf_data <- read.maf(maf = maf_path, vc_nonSyn = FALSE, verbose = TRUE)
library(maftools)
getVariantClassification()
library(maftools)
maf_path <- "/Users/rshibaki/Documents/project/ADJUST/adjust/maf_test.tsv"
# データを読み込む（エラーが出ても、部分的にデータを取得できる可能性あり）
maf_data <- tryCatch(
    read.maf(maf = maf_path, vc_nonSyn = NULL, verbose = TRUE),
    error = function(e) return(NULL)
)
# 認識された Variant_Classification を確認
if (!is.null(maf_data)) {
    print(maf_data@data$Variant_Classification)
} else {
    print("MAF の読み込みに失敗しました。")
}
library(maftools)
oncoplot(maf = maf_data, showTumorSampleBarcodes = TRUE)
q()
library(maftools)
plot_oncoplot <- function(maf_file, sample_order) {
    maf_data <- read.maf(maf = maf_file)
    # `WRN` と `DICER1` の変異頻度を取得
    gene_summary <- getGeneSummary(maf_data)
    print("WRN の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "WRN", c("Hugo_Symbol", "MutatedSamples")])
    
    print("DICER1 の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "DICER1", c("Hugo_Symbol", "MutatedSamples")])
    output_path <- file.path(getwd(), "oncoplot.png")
    
    png(output_path, width = 1500, height = 1000)
    oncoplot(maf = maf_data, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order, 
             showGenes = c("WRN", "DICER1"),  
             minMut = 1,  # 変異が1つでもある遺伝子を含める
             top = 30)  
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
    return(invisible(NULL))
}
library(maftools)
plot_oncoplot <- function(maf_file, sample_order) {
    maf_data <- read.maf(maf = maf_file)
    # `WRN` と `DICER1` の変異頻度を取得
    gene_summary <- getGeneSummary(maf_data)
    print("WRN の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "WRN", c("Hugo_Symbol", "MutatedSamples")])
    
    print("DICER1 の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "DICER1", c("Hugo_Symbol", "MutatedSamples")])
    output_path <- file.path(getwd(), "oncoplot.png")
    
    png(output_path, width = 1500, height = 1000)
    oncoplot(maf = maf_data, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order, 
             showGenes = c("WRN", "DICER1"),  
             minMut = 1,  # 変異が1つでもある遺伝子を含める
             top = 30)  
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
    return(invisible(NULL))
}
library(maftools)
plot_oncoplot <- function(maf_file, sample_order) {
    maf_data <- read.maf(maf = maf_file)
    # `WRN` と `DICER1` の変異頻度を取得
    gene_summary <- getGeneSummary(maf_data)
    print("WRN の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "WRN", c("Hugo_Symbol", "MutatedSamples")])
    
    print("DICER1 の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "DICER1", c("Hugo_Symbol", "MutatedSamples")])
    output_path <- file.path(getwd(), "oncoplot.png")
    
    png(output_path, width = 1500, height = 1000)
    oncoplot(maf = maf_data, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order, 
             showGenes = c("WRN", "DICER1"),  
             minMut = 1,  # 変異が1つでもある遺伝子を含める
             top = 30)  
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
    return(invisible(NULL))
}
[200~library(maftools)
plot_oncoplot <- function(maf_file, sample_order) {
    maf_data <- read.maf(maf = maf_file)
    # `WRN` と `DICER1` の変異頻度を取得
    gene_summary <- getGeneSummary(maf_data)
    print("WRN の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "WRN", c("Hugo_Symbol", "MutatedSamples")])
    
    print("DICER1 の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "DICER1", c("Hugo_Symbol", "MutatedSamples")])
    output_path <- file.path(getwd(), "oncoplot.png")
    
    png(output_path, width = 1500, height = 1000)
    oncoplot(maf = maf_data, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order, 
             showGenes = c("WRN", "DICER1"),  
             minMut = 1,  # 変異が1つでもある遺伝子を含める
             top = 30)  
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
    return(invisible(NULL))
}
q()
library(maftools)
plot_oncoplot <- function(maf_file, sample_order) {
    maf_data <- read.maf(maf = maf_file)
    # `WRN` と `DICER1` の変異頻度を取得
    gene_summary <- getGeneSummary(maf_data)
    print("WRN の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "WRN", c("Hugo_Symbol", "MutatedSamples")])
    
    print("DICER1 の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "DICER1", c("Hugo_Symbol", "MutatedSamples")])
    output_path <- file.path(getwd(), "oncoplot.png")
    
    png(output_path, width = 1500, height = 1000)
    oncoplot(maf = maf_data, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order, 
             showGenes = c("WRN", "DICER1"),  
             minMut = 1,  # 変異が1つでもある遺伝子を含める
             top = 30)  
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
    return(invisible(NULL))
}
library(maftools)
plot_oncoplot <- function(maf_file, sample_order) {
    maf_data <- read.maf(maf = maf_file)
    # `WRN` と `DICER1` の変異頻度を取得
    gene_summary <- getGeneSummary(maf_data)
    print("WRN の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "WRN", c("Hugo_Symbol", "MutatedSamples")])
    print("DICER1 の変異頻度:")
    print(gene_summary[gene_summary$Hugo_Symbol == "DICER1", c("Hugo_Symbol", "MutatedSamples")])
    output_path <- file.path(getwd(), "oncoplot.png")
    png(output_path, width = 1500, height = 1000)
    oncoplot(maf = maf_data, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order, 
             showGenes = c("WRN", "DICER1"),  
             minMut = 1,  # 変異が1つでもある遺伝子を含める
             top = 30)  
    dev.off()
    print(paste("Oncoplot を保存しました:", output_path))
    return(invisible(NULL))
}
q()
# Excel の「main_Selected」シートから変異データを読み込みます
mutation_df <- read_excel("ADJUST_DNA.xlsx", sheet = "main_Selected")
print(paste("変異データの件数：", nrow(mutation_df)))
# 使用する列だけを残す（必要な列に合わせてください）
columns_needed <- c("Patient_ID", "Chromosome", "Region", "Type", "Reference", "Allele",
                    "Gene Cards", "Non-synonymous", "Coding region change")
mutation_df <- mutation_df[, columns_needed]
# Chromosome と Region は文字列型に変換
mutation_df$Chromosome <- as.character(mutation_df$Chromosome)
mutation_df$Region <- as.character(mutation_df$Region)
エラー: `path` does not exist: ‘ADJUST_DNA.xlsx’
> 
# Excel の「main_Selected」シートから変異データを読み込みます
mutation_df <- read_excel("/Users/rshibaki/Library/CloudStorage/GoogleDrive-ryota.shibaki@gmail.com/マイドライブ/ADJUST試験/DATA/ADJUST_DNA.xlsx", sheet = "main_Selected")
print(paste("変異データの件数：", nrow(mutation_df)))
# 使用する列だけを残す（必要な列に合わせてください）
columns_needed <- c("Patient_ID", "Chromosome", "Region", "Type", "Reference", "Allele",
                    "Gene Cards", "Non-synonymous", "Coding region change")
mutation_df <- mutation_df[, columns_needed]
# Chromosome と Region は文字列型に変換
mutation_df$Chromosome <- as.character(mutation_df$Chromosome)
mutation_df$Region <- as.character(mutation_df$Region)
install.packages("readxl")
library(readxl)
# 必要なパッケージの読み込み
library(readxl)
# Excel の「main_Selected」シートから変異データを読み込みます
mutation_df <- read_excel("/Users/rshibaki/Library/CloudStorage/GoogleDrive-ryota.shibaki@gmail.com/マイドライブ/ADJUST試験/DATA/ADJUST_DNA.xlsx", sheet = "main_Selected")
print(paste("変異データの件数：", nrow(mutation_df)))
# 使用する列だけを残す（必要な列に合わせてください）
columns_needed <- c("Patient_ID", "Chromosome", "Region", "Type", "Reference", "Allele",
                    "Gene Cards", "Non-synonymous", "Coding region change")
mutation_df <- mutation_df[, columns_needed]
# Chromosome と Region は文字列型に変換
mutation_df$Chromosome <- as.character(mutation_df$Chromosome)
mutation_df$Region <- as.character(mutation_df$Region)
# 文字列から数字だけを取り出して開始・終了位置を抽出する関数
extract_positions <- function(region) {
  if (grepl("\\.\\.", region)) {
    parts <- unlist(strsplit(region, "\\.\\.")) 
    start <- as.numeric(gsub("[^0-9]", "", parts[1]))
    end   <- as.numeric(gsub("[^0-9]", "", parts[2]))
  } else {
    start <- end <- as.numeric(gsub("[^0-9]", "", region))
  }
  return(c(start, end))
}
# apply() で各行に対して関数を実行し、新たに Start_Position と End_Position 列を追加
positions <- t(sapply(mutation_df$Region, extract_positions))
mutation_df$Start_Position <- positions[, 1]
mutation_df$End_Position   <- positions[, 2]
# 変異タイプを決める関数
determine_variant_type <- function(ref, alt) {
  if (nchar(ref) == 1 && nchar(alt) == 1) {
    return("SNP")
  } else if (nchar(ref) > nchar(alt)) {
    return("DEL")
  } else if (nchar(ref) < nchar(alt)) {
    return("INS")
  } else {
    return("OTHER")
  }
}
mutation_df$Variant_Type <- mapply(determine_variant_type, mutation_df$Reference, mutation_df$Allele)
# 変異分類（ここでは例として、Non-synonymous が "Yes" なら Missense_Mutation、それ以外は Frame_Shift_Del とする）
classify_variant <- function(row) {
  # row はリスト（またはデータフレームの 1 行）
  if (toupper(row["Non-synonymous"]) == "YES") {
    if (row["Type"] == "SNV") {
      return("Missense_Mutation")
    } else {
      return("Frame_Shift_Del")
    }
  } else {
    return("Missense_Mutation")
  }
}
mutation_df$Variant_Classification <- apply(mutation_df, 1, classify_variant)
# 列名の変更：Patient_ID → Tumor_Sample_Barcode、Gene Cards → Hugo_Symbol、Reference → Reference_Allele、Allele → Tumor_Seq_Allele2
maf_df <- mutation_df
names(maf_df)[names(maf_df) == "Patient_ID"] <- "Tumor_Sample_Barcode"
names(maf_df)[names(maf_df) == "Gene Cards"] <- "Hugo_Symbol"
names(maf_df)[names(maf_df) == "Reference"] <- "Reference_Allele"
names(maf_df)[names(maf_df) == "Allele"] <- "Tumor_Seq_Allele2"
# 必要な列だけを残す
maf_df <- maf_df[, c("Tumor_Sample_Barcode", "Hugo_Symbol", "Chromosome",
                     "Start_Position", "End_Position", "Reference_Allele",
                     "Tumor_Seq_Allele2", "Variant_Classification", "Variant_Type")]
# TSV ファイルとして保存（必要に応じてパスを変更）
write.table(maf_df, file = "maf_test.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
print("maf_test.tsv を作成しました。")
# MAF オブジェクトを作成
maf_object <- read.maf(maf = "maf_test.tsv")
# オンコプロットを png ファイルに出力する（ここでは TMB 棒グラフはデフォルトで表示されるかもしれませんが、後でカスタムグラフと置き換えます）
png(filename = "oncoplot.png", width = 1200, height = 800)
oncoplot(maf = maf_object, showTumorSampleBarcodes = TRUE)
dev.off()
print("oncoplot.png を作成しました。")
# readxl パッケージのインストール（最初のみ）
install.packages("readxl")
install.packages("ggplot2")
install.packages("maftools")
install.packages("png")
install.packages("gridExtra")
library(readxl)     # Excel ファイル読み込み用
library(ggplot2)    # グラフ作成用
library(maftools)   # オンコプロット作成用
library(png)        # PNG 画像読み込み用
library(gridExtra)  # 複数グラフをまとめる用
# Excel の「main_Selected」シートから変異データを読み込みます
mutation_df <- read_excel("ADJUST_DNA.xlsx", sheet = "main_Selected")
print(paste("変異データの件数：", nrow(mutation_df)))
# 使用する列だけを残す（必要な列に合わせてください）
columns_needed <- c("Patient_ID", "Chromosome", "Region", "Type", "Reference", "Allele",
                    "Gene Cards", "Non-synonymous", "Coding region change")
mutation_df <- mutation_df[, columns_needed]
# Chromosome と Region は文字列型に変換
mutation_df$Chromosome <- as.character(mutation_df$Chromosome)
mutation_df$Region <- as.character(mutation_df$Region)
# 必要なパッケージの読み込み
library(readxl)
# Excel の「main_Selected」シートから変異データを読み込みます
mutation_df <- read_excel("/Users/rshibaki/Library/CloudStorage/GoogleDrive-ryota.shibaki@gmail.com/マイドライブ/ADJUST試験/DATA/ADJUST_DNA.xlsx", sheet = "main_Selected")
print(paste("変異データの件数：", nrow(mutation_df)))
# 使用する列だけを残す（必要な列に合わせてください）
columns_needed <- c("Patient_ID", "Chromosome", "Region", "Type", "Reference", "Allele",
                    "Gene Cards", "Non-synonymous", "Coding region change")
mutation_df <- mutation_df[, columns_needed]
# Chromosome と Region は文字列型に変換
mutation_df$Chromosome <- as.character(mutation_df$Chromosome)
mutation_df$Region <- as.character(mutation_df$Region)
# 文字列から数字だけを取り出して開始・終了位置を抽出する関数
extract_positions <- function(region) {
  if (grepl("\\.\\.", region)) {
    parts <- unlist(strsplit(region, "\\.\\.")) 
    start <- as.numeric(gsub("[^0-9]", "", parts[1]))
    end   <- as.numeric(gsub("[^0-9]", "", parts[2]))
  } else {
    start <- end <- as.numeric(gsub("[^0-9]", "", region))
  }
  return(c(start, end))
}
# apply() で各行に対して関数を実行し、新たに Start_Position と End_Position 列を追加
positions <- t(sapply(mutation_df$Region, extract_positions))
mutation_df$Start_Position <- positions[, 1]
mutation_df$End_Position   <- positions[, 2]
# 変異タイプを決める関数
determine_variant_type <- function(ref, alt) {
  if (nchar(ref) == 1 && nchar(alt) == 1) {
    return("SNP")
  } else if (nchar(ref) > nchar(alt)) {
    return("DEL")
  } else if (nchar(ref) < nchar(alt)) {
    return("INS")
  } else {
    return("OTHER")
  }
}
mutation_df$Variant_Type <- mapply(determine_variant_type, mutation_df$Reference, mutation_df$Allele)
# 変異分類（ここでは例として、Non-synonymous が "Yes" なら Missense_Mutation、それ以外は Frame_Shift_Del とする）
classify_variant <- function(row) {
  # row はリスト（またはデータフレームの 1 行）
  if (toupper(row["Non-synonymous"]) == "YES") {
    if (row["Type"] == "SNV") {
      return("Missense_Mutation")
    } else {
      return("Frame_Shift_Del")
    }
  } else {
    return("Missense_Mutation")
  }
}
mutation_df$Variant_Classification <- apply(mutation_df, 1, classify_variant)
# 列名の変更：Patient_ID → Tumor_Sample_Barcode、Gene Cards → Hugo_Symbol、Reference → Reference_Allele、Allele → Tumor_Seq_Allele2
maf_df <- mutation_df
names(maf_df)[names(maf_df) == "Patient_ID"] <- "Tumor_Sample_Barcode"
names(maf_df)[names(maf_df) == "Gene Cards"] <- "Hugo_Symbol"
names(maf_df)[names(maf_df) == "Reference"] <- "Reference_Allele"
names(maf_df)[names(maf_df) == "Allele"] <- "Tumor_Seq_Allele2"
# 必要な列だけを残す
maf_df <- maf_df[, c("Tumor_Sample_Barcode", "Hugo_Symbol", "Chromosome",
                     "Start_Position", "End_Position", "Reference_Allele",
                     "Tumor_Seq_Allele2", "Variant_Classification", "Variant_Type")]
# TSV ファイルとして保存（必要に応じてパスを変更）
write.table(maf_df, file = "maf_test.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
print("maf_test.tsv を作成しました。")
# MAF オブジェクトを作成
maf_object <- read.maf(maf = "maf_test.tsv")
# オンコプロットを png ファイルに出力する（ここでは TMB 棒グラフはデフォルトで表示されるかもしれませんが、後でカスタムグラフと置き換えます）
png(filename = "oncoplot.png", width = 1200, height = 800)
oncoplot(maf = maf_object, showTumorSampleBarcodes = TRUE)
dev.off()
print("oncoplot.png を作成しました。")
# Excel の「TMB」シートから TMB データを読み込みます
clinical_data <- read_excel("ADJUST_DNA.xlsx", sheet = "TMB")
# Patient_ID を文字列に変換し、列名を統一
clinical_data$Patient_ID <- as.character(clinical_data$Patient_ID)
names(clinical_data)[names(clinical_data) == "Patient_ID"] <- "Tumor_Sample_Barcode"
names(clinical_data)[names(clinical_data) == "TMB (Mutations/Mb)"] <- "TMB"
# clinical_data には DFS など他の列もありますが、ここでは TMB の値だけを使います
# Excel の「TMB」シートから TMB データを読み込みます
clinical_data <- read_excel("/Users/rshibaki/Library/CloudStorage/GoogleDrive-ryota.shibaki@gmail.com/マイドライブ/ADJUST試験/DATA/ADJUST_DNA.xlsx", sheet = "TMB")
# Patient_ID を文字列に変換し、列名を統一
clinical_data$Patient_ID <- as.character(clinical_data$Patient_ID)
names(clinical_data)[names(clinical_data) == "Patient_ID"] <- "Tumor_Sample_Barcode"
names(clinical_data)[names(clinical_data) == "TMB (Mutations/Mb)"] <- "TMB"
# clinical_data には DFS など他の列もありますが、ここでは TMB の値だけを使います
tmb_plot <- ggplot(clinical_data, aes(x = Tumor_Sample_Barcode, y = TMB)) +
  geom_bar(stat = "identity", fill = "steelblue") +    # 棒グラフを描く
  theme_minimal() +                                     # シンプルなテーマ
  xlab("") +                                            # 横軸ラベルを空にする
  ylab("TMB (Mutations/Mb)") +                          # 縦軸ラベルを設定
  theme(axis.text.x = element_text(angle = 90, hjust = 1))# 横軸の文字を90度回転
print(tmb_plot)
# PNG ファイルから画像を読み込み、グラフィカルオブジェクトに変換する
oncograph <- readPNG("oncoplot.png")
oncograph_grob <- rasterGrob(oncograph, interpolate = TRUE)
# PNG ファイルから画像を読み込み、グラフィカルオブジェクトに変換する
oncograph <- readPNG("oncoplot.png")
oncograph_grob <- rasterGrob(oncograph, interpolate = TRUE)
library(grid)   # grid パッケージを読み込む
library(png)    # PNG を読み込むためのパッケージ
# PNG ファイルから画像を読み込み、グラフィカルオブジェクトに変換する
oncograph <- readPNG("oncoplot.png")
oncograph_grob <- rasterGrob(oncograph, interpolate = TRUE)
# PNG ファイルから画像を読み込み、グラフィカルオブジェクトに変換する
oncograph <- readPNG("oncoplot.png")
oncograph_grob <- rasterGrob(oncograph, interpolate = TRUE)
grid.arrange(oncograph_grob, tmb_plot, ncol = 1, heights = c(3, 1))
oncoplot(maf = maf_object,
         showTumorSampleBarcodes = TRUE,
         sampleOrder = sample_order,
         draw_tmb = FALSE)  # TMBグラフを非表示にする
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("maftools")
oncoplot(maf = maf_object,
         showTumorSampleBarcodes = TRUE,
         sampleOrder = sample_order,
         draw_tmb = FALSE)
packageVersion("maftools")
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("maftools", force = TRUE)
oncoplot(maf = maf_object,
         showTumorSampleBarcodes = TRUE,
         sampleOrder = sample_order,
         draw_tmb = FALSE)
library(maftools)
plot_oncoplot <- function(maf_data, sample_order) {
    # MAF データフレームから MAF オブジェクトを作成
    maf_object <- read.maf(maf = as.data.frame(maf_data), vc_nonSyn = NULL)
    
    # ワークアラウンド：tumorSampleSummary の tmb 値をすべて 0 に設定
    maf_object@tumorSampleSummary$tmb <- rep(0, nrow(maf_object@tumorSampleSummary))
    
    output_path <- file.path(getwd(), "oncoplot.png")
    png(filename = output_path, width = 1200, height = 800)
    
    # TMB の引数は指定せず、sampleOrder などの必要な引数のみを渡す
    oncoplot(maf = maf_object, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order)
    
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
}
maf_object@tumorSampleSummary$tmb <- rep(0, nrow(maf_object@tumorSampleSummary))
oncoplot(maf = maf_object,
         showTumorSampleBarcodes = TRUE,
         sampleOrder = sample_order,
         draw_tmb = FALSE)
library(maftools)
plot_oncoplot <- function(maf_data, sample_order) {
    # ダミーの臨床データを作成（各症例の TMB を 0 に設定）
    clinical.df <- data.frame(Tumor_Sample_Barcode = sample_order,
                              tmb = rep(0, length(sample_order)))
    
    # clinicalData 引数を指定して MAF オブジェクトを作成
    maf_object <- read.maf(maf = as.data.frame(maf_data), 
                           clinicalData = clinical.df, 
                           vc_nonSyn = NULL)
    
    output_path <- file.path(getwd(), "oncoplot.png")
    png(filename = output_path, width = 1200, height = 800)
    
    # sampleOrder など必要な引数のみ指定（TMB は dummy の 0 が使われる）
    oncoplot(maf = maf_object, 
             showTumorSampleBarcodes = TRUE, 
             sampleOrder = sample_order)
    
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
}
q()
library(maftools)
plot_oncoplot <- function(maf_data, clinical_data, sample_order) {
    maf_df <- as.data.frame(maf_data)
    maf_object <- read.maf(maf = maf_df, clinicalData = clinical_data, vc_nonSyn = NULL)
    
    output_path <- file.path(getwd(), "oncoplot.png")
    png(filename = output_path, width = 1200, height = 800)
    
    # clinicalFeatures には "TMB" を指定しない、draw_titv = FALSE を追加
    oncoplot(
        maf = maf_object, 
        showTumorSampleBarcodes = TRUE, 
        sampleOrder = sample_order,
        draw_titv = FALSE  # <--- これでTMBの棒グラフを削除
    )
    dev.off()
    
    print(paste("Oncoplot を保存しました:", output_path))
}
q()
library(maftools)
plot_oncoplot <- function(maf_data, clinical_data, sample_order) {
    maf_df <- as.data.frame(maf_data)
    maf_object <- read.maf(maf = maf_df, clinicalData = clinical_data, vc_nonSyn = NULL)
    output_path <- file.path(getwd(), "oncoplot.png")
    png(filename = output_path, width = 1200, height = 800)
    # clinicalFeatures には "TMB" を指定しない、draw_titv = FALSE を追加
    oncoplot(
        maf = maf_object, 
        showTumorSampleBarcodes = TRUE, 
        sampleOrder = sample_order,
        draw_titv = FALSE  # <--- これでTMBの棒グラフを削除
    )
    dev.off()
    print(paste("Oncoplot を保存しました:", output_path))
}
q()
oncoplot(maf = maf_object, 
         clinicalFeatures = c("TMB", "DFS"), 
         showTumorSampleBarcodes = TRUE, 
         sampleOrder = sample_order)

library(maftools)

maftools::oncoplot(maf = maf_object, clinicalFeatures = c("TMB", "DFS"),
                     showTumorSampleBarcodes = TRUE, sampleOrder = sample_order)

poetry run pathon oncoplot.py
q()
